{"version":3,"sources":["components/Camera.js","components/Records.js","validation/validate-athlete-code.js","App.js","serviceWorker.js","index.js"],"names":["Camera","onDetected","useEffect","console","log","Quagga","init","numOfWorkers","locate","locator","patchSize","halfSample","frequency","inputStream","name","type","target","document","querySelector","area","top","bottom","left","right","decoder","readers","err","start","onProcessed","result","drawingCtx","canvas","ctx","overlay","drawingCanvas","dom","boxes","clearRect","parseInt","getAttribute","filter","box","forEach","ImageDebug","drawPath","x","y","color","lineWidth","codeResult","code","line","data","trim","id","className","css","Records","records","map","record","i","key","validateAthleteCode","test","App","useState","detected","setDetected","concat","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6oBAIO,SAASA,EAAT,GAAiC,IAAfC,EAAc,EAAdA,WA+DvB,OA9DAC,qBAAU,WACRC,QAAQC,IAAI,aACZC,IAAOC,KAAK,CACVC,aAAc,EACdC,QAAQ,EACRC,QAAS,CACLC,UAAW,SACXC,YAAY,GAEhBC,UAAW,EACXC,YAAc,CACZC,KAAO,OACPC,KAAO,aACPC,OAAQC,SAASC,cAAc,YAC/BC,KAAM,CACJC,IAAK,MACLC,OAAQ,MACRC,KAAM,KACNC,MAAO,OAGXC,QAAU,CACRC,QAAU,CAAC,sBAEZ,SAASC,GACJA,EACAvB,QAAQC,IAAIsB,IAGhBvB,QAAQC,IAAI,2CACZC,IAAOsB,QACPtB,IAAOuB,aAAY,SAACC,GAClB1B,QAAQC,IAAI,eACZ,IAAI0B,EAAazB,IAAO0B,OAAOC,IAAIC,QAC/BC,EAAgB7B,IAAO0B,OAAOI,IAAIF,QAElCJ,IACIA,EAAOO,QACPN,EAAWO,UAAU,EAAG,EAAGC,SAASJ,EAAcK,aAAa,UAAWD,SAASJ,EAAcK,aAAa,YAC9GV,EAAOO,MAAMI,QAAO,SAAUC,GAC1B,OAAOA,IAAQZ,EAAOY,OACvBC,SAAQ,SAAUD,GACjBpC,IAAOsC,WAAWC,SAASH,EAAK,CAACI,EAAG,EAAGC,EAAG,GAAIhB,EAAY,CAACiB,MAAO,QAASC,UAAW,QAI1FnB,EAAOY,KACPpC,IAAOsC,WAAWC,SAASf,EAAOY,IAAK,CAACI,EAAG,EAAGC,EAAG,GAAIhB,EAAY,CAACiB,MAAO,OAAQC,UAAW,IAG5FnB,EAAOoB,YAAcpB,EAAOoB,WAAWC,MACvC7C,IAAOsC,WAAWC,SAASf,EAAOsB,KAAM,CAACN,EAAG,IAAKC,EAAG,KAAMhB,EAAY,CAACiB,MAAO,MAAOC,UAAW,QAI1G3C,IAAOJ,YAAW,SAAAmD,GAChBjD,QAAQC,IAAI,aAAcgD,GAC1BnD,EAAWmD,EAAKH,WAAWC,KAAKG,iBAGrC,IAGD,yBACEC,GAAG,UACHC,UAAWC,YAAF,OCpER,SAASC,EAAT,GAA+B,IAAZC,EAAW,EAAXA,QACxB,OACE,6BACE,2CACA,4BACGA,EAAQC,KAAI,SAACC,EAAQC,GAAT,OACX,wBAAIC,IAAKD,GAAID,QCRhB,IAAMG,EAAsB,SAAAb,GAAI,MAAI,cAAcc,KAAKd,I,gGCuB/Ce,MAjBf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,KAOb,OACE,yBAAKb,UAAWC,YAAF,MAGZ,kBAACxD,EAAD,CAAQC,WATQ,SAAAiD,GACda,EAAoBb,IACtBkB,EAAYD,EAASE,OAAOnB,OAQ5B,kBAACO,EAAD,CAASC,QAASS,MCNJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS3D,SAAS4D,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a8b8098f.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport Quagga from 'quagga';\nimport { css } from 'emotion';\n\nexport function Camera({ onDetected }) {\n  useEffect(() => {\n    console.log('useEffect');\n    Quagga.init({\n      numOfWorkers: 4,\n      locate: true,\n      locator: {\n          patchSize: \"medium\",\n          halfSample: false,\n      },\n      frequency: 5,\n      inputStream : {\n        name : \"Live\",\n        type : \"LiveStream\",\n        target: document.querySelector('#scanner'),\n        area: {\n          top: \"30%\",\n          bottom: \"30%\",\n          left: \"0%\",\n          right: \"0%\",\n        }\n      },\n      decoder : {\n        readers : [\"code_128_reader\"]\n      }\n    }, function(err) {\n        if (err) {\n            console.log(err);\n            return\n        }\n        console.log(\"Initialization finished. Ready to start\");\n        Quagga.start();\n        Quagga.onProcessed((result) => {\n          console.log('onProcessed');\n          var drawingCtx = Quagga.canvas.ctx.overlay,\n              drawingCanvas = Quagga.canvas.dom.overlay;\n\n          if (result) {\n              if (result.boxes) {\n                  drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute(\"width\")), parseInt(drawingCanvas.getAttribute(\"height\")));\n                  result.boxes.filter(function (box) {\n                      return box !== result.box;\n                  }).forEach(function (box) {\n                      Quagga.ImageDebug.drawPath(box, {x: 0, y: 1}, drawingCtx, {color: \"green\", lineWidth: 2});\n                  });\n              }\n\n              if (result.box) {\n                  Quagga.ImageDebug.drawPath(result.box, {x: 0, y: 1}, drawingCtx, {color: \"#00F\", lineWidth: 2});\n              }\n\n              if (result.codeResult && result.codeResult.code) {\n                  Quagga.ImageDebug.drawPath(result.line, {x: 'x', y: 'y'}, drawingCtx, {color: 'red', lineWidth: 3});\n              }\n          }\n        });\n        Quagga.onDetected(data => {\n          console.log('onDetected', data);\n          onDetected(data.codeResult.code.trim());\n        });\n    });\n  }, []);\n\n  return (\n    <div\n      id=\"scanner\"\n      className={css`\n        background: #222;\n        display: flex;\n        justify-content: center;\n        max-height: 50vh;\n        width: 100vw;\n        position: relative;\n        & canvas {\n          position: absolute;\n          top: 0;\n          left: 50%;\n          transform: translateX(-50%);\n          max-height: 100%;\n          max-width: 100%;\n        }\n      `}\n    ></div>\n  );\n}\n\n","import React from 'react';\n\nexport function Records({ records }) {\n  return (\n    <div>\n      <h2>Detected 54</h2>\n      <ul>\n        {records.map((record, i) => (\n          <li key={i}>{record}</li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n","export const validateAthleteCode = code => /A[0-9]{1,8}/.test(code);\n","import React, { useState } from 'react';\nimport { css } from 'emotion';\n\nimport { Camera, Records } from './components';\nimport { validateAthleteCode } from './validation';\n\nfunction App() {\n  const [detected, setDetected] = useState([]);\n  const addDetected = code => {\n    if (validateAthleteCode(code)) {\n      setDetected(detected.concat(code));\n    }\n  }\n  return (\n    <div className={css`\n      height: 100%;\n    `}>\n      <Camera onDetected={addDetected} />\n      <Records records={detected} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}